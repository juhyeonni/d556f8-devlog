{"componentChunkName":"component---src-templates-blog-template-js","path":"/f822356d-1332-42ff-b90f-9ea5962f5bee/","result":{"data":{"cur":{"id":"61a64521-9b0a-59d6-ab6d-7e4fb562ae18","html":"<p>우선 코드를 먼저 보고 시작합시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> myName<span class=\"token punctuation\">;</span></code></pre></div>\n<p>라는 코드를 보면 어떤 결과가 나올 것 같은가?</p>\n<p>결과는 <code class=\"language-text\">undefined</code> 가 나왔다.</p>\n<p>그럼 이 코드는 어떤 결과가 나올 것 같은가?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>결과는 error가 발생하고,\n<code class=\"language-text\">myName is not defined</code> 라는 에러메세지를 반환했다.</p>\n<p>왜 결과가 다른 건가?</p>\n<p>var는 hoisting이라는 것을 하는데,</p>\n<p>변수를 먼저 프로그램이 실행되기 전에, 변수를 선언을 먼저한다.</p>\n<p>그 다음 초기화하는 문장이 나오고 결과가 나오게 되는 것이다.</p>\n<p>첫번째 코드 같은 경우는</p>\n<ol>\n<li><code class=\"language-text\">var myName</code> 이 먼저 선언이 됨.</li>\n<li><code class=\"language-text\">console.log(myName)</code>을 함, 그러나 초기화 값은 없음.</li>\n<li>결과는 <code class=\"language-text\">undefined</code></li>\n</ol>\n<p>두번째 코드의 경우</p>\n<p>선언이 되어있는 않은 <code class=\"language-text\">myName</code>을 <code class=\"language-text\">console.log()</code> 한 것이다.</p>","excerpt":"우선 코드를 먼저 보고 시작합시다. 라는 코드를 보면 어떤 결과가 나올 것 같은가? 결과는  가 나왔다. 그럼 이 코드는 어떤 결과가 나올 것 같은가? 결과는 error가 발생하고,\n 라는 에러메세지를 반환했다. 왜 결과가 다른 건가? var는 hoisting이라는 것을 하는데, 변수를 먼저 프로그램이 실행되기 전에, 변수를 선언을 먼저한다. 그 다음 초기화하는 문장이 나오고 결과가 나오게 되는 것이다. 첫번째 코드 같은 경우는  이 먼저 선언이 됨. 을 함, 그러나 초기화 값은 없음. 결과는  두번째 코드의 경우 선언이 되어있는 않은 을  한 것이다.","frontmatter":{"date":"April 22, 2023","title":"Temporal Dead Zone","categories":"Javascript Syntax","author":"Juhyeon Lee","emoji":null},"fields":{"slug":"/f822356d-1332-42ff-b90f-9ea5962f5bee/"}},"next":{"id":"7b91e546-04c8-51cb-9105-0a4a17de2a78","html":"<p>ES2020에서 추가된 <code class=\"language-text\">??</code> (널 병합) 연산자와 <code class=\"language-text\">?.</code> (옵셔널 체이닝)</p>\n<p><strong>널 병합 연산자</strong>는 주로 || 연산자 대용으로 사용되며, falsy 값(<code class=\"language-text\">0</code>, <code class=\"language-text\">‘’</code>, <code class=\"language-text\">false</code>, <code class=\"language-text\">NaN</code>, <code class=\"language-text\">null</code>, <code class=\"language-text\">undefined</code>) 중 <code class=\"language-text\">null</code>과 <code class=\"language-text\">undefined</code>만 따로 구분합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> a <span class=\"token operator\">||</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> d <span class=\"token operator\">=</span> c <span class=\"token operator\">??</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n\n<span class=\"token keyword\">const</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> e <span class=\"token operator\">??</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\n<span class=\"token keyword\">const</span> g <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> h <span class=\"token operator\">=</span> g <span class=\"token operator\">??</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></code></pre></div>\n<p><code class=\"language-text\">null</code>, <code class=\"language-text\">undefined</code> 만 따로 구분하므로, falsy중에서 의도를 가지고 있는 값을 제외하고 처리를 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\ncount <span class=\"token operator\">=</span> count <span class=\"token operator\">||</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token number\">123</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token comment\">// 일때 0을 예상하지만,</span>\n<span class=\"token comment\">// 실제로는 &lt;div>123&lt;/div>이다.</span></code></pre></div>\n<p><strong>옵셔널 체이닝</strong>은 <code class=\"language-text\">null</code>이나 <code class=\"language-text\">undefined</code>의 속성을 조회하는 경우 에러가 발생하는 것을 막습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\na<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\tc<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">;</span> <span class=\"token comment\">// null...</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// cannot read properties of null</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\tc<span class=\"token operator\">?.</span>d<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 문제없음</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"date":"April 22, 2023","title":"Nullish coalescing / Optional chaining","categories":"Javascript Syntax","author":"Juhyeon Lee","emoji":null},"fields":{"slug":"/e8b8799d-ee54-48ce-903b-f43dbe7683dc/"}},"prev":{"id":"2f63118b-4ddb-5b4b-9e80-d6e846339423","html":"<p>변수.padStart(채울갯수, ‘채울문자열’)</p>\n<p>변수.padEnd(채울갯수, ‘채울문자열’)</p>","frontmatter":{"date":"April 22, 2023","title":"문자열 채우기","categories":"Javascript Syntax","author":"Juhyeon Lee","emoji":null},"fields":{"slug":"/fca55551-dffd-41f3-b218-246c720fba8b/"}},"site":{"siteMetadata":{"siteUrl":"https://d556f8.netlify.io","comments":{"utterances":{"repo":"d556f8/d556f8-devlog"}}}}},"pageContext":{"slug":"/f822356d-1332-42ff-b90f-9ea5962f5bee/","nextSlug":"/e8b8799d-ee54-48ce-903b-f43dbe7683dc/","prevSlug":"/fca55551-dffd-41f3-b218-246c720fba8b/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"],"slicesMap":{}}