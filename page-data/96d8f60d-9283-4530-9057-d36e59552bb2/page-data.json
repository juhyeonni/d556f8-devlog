{"componentChunkName":"component---src-templates-blog-template-js","path":"/96d8f60d-9283-4530-9057-d36e59552bb2/","result":{"data":{"cur":{"id":"149ba741-7280-543b-b8dd-ea3a300e2eca","html":"<h1 id=\"다형성polymorphism\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%ED%98%95%EC%84%B1polymorphism\" aria-label=\"다형성polymorphism permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다형성(Polymorphism)</h1>\n<p>다형성은 하나의 인터페이스로부터 상속받은 여러 클래스들이 같은 메서드를 가지고 있을 때 각 클래스마다 다르게 구현된 메서드를 호출하는 기능.</p>\n<p>즉, 같은 인터페이스를 가지면서도 <strong>각 클래스마다 다른 구현을 할 수 있도록 하는 기능</strong>이다.</p>\n<p>자바에서는 _오버라이딩(overriding)_과 _오버로딩(overloading)_을 통해 다형성을 구현합니다.</p>\n<p><strong>WHAT</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 다형성은 하나의 타입이 여러 형태를 가질 수 있다는 것.\n- 객체가 상속받은 클래스나 인터페이스를 구현하는 경우, 객체는 해당 클래스나 인터페이스를 상속받은 객체처럼 동작할 수 있는 기능을 가짐.</code></pre></div>\n<p><strong>WHY</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 코드를 **재사용**할 수 있어서 코드를 작성할 때 유연하게 프로그램을 작성할 수 있다.\n- 코드의 **가독성**과 **유지보수성**을 높일 수 있다.</code></pre></div>\n<p><strong>FEATURE</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 같은 메서드명으로 여러 타입의 객체를 처리할 수 있다.\n- 상위 타입의 참조변수로 하위 타입의 객체를 참조할 수 있다.\n- 인터페이스를 구현하는 클래스는 인터페이스를 사용할 수 있다.</code></pre></div>\n<ol>\n<li>Visibility of a reference variable (참조변수의 가시성)</li>\n<li>Dynamic binding for an overrided method (오버라이딩된 메소드의 동적 바인딩)</li>\n</ol>\n<h2 id=\"자바프로그래밍에서의-다형성\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%97%90%EC%84%9C%EC%9D%98-%EB%8B%A4%ED%98%95%EC%84%B1\" aria-label=\"자바프로그래밍에서의 다형성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바프로그래밍에서의 다형성</h2>\n<ol>\n<li>\n<p><strong>코드 1</strong></p>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">prtX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> arg<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">A</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;===== err, 가시성문제....</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">B</span><span class=\"token punctuation\">)</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// &lt;=== 참조변수의 자료형을 강제적으로 형변환</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>B는 A를 상속하는 클래스이다.</li>\n</ul>\n<p><strong>메인메소드</strong></p>\n<hr>\n<ol>\n<li><code class=\"language-text\">B</code>의 인스턴스를 만들고 <code class=\"language-text\">A</code>형의 <code class=\"language-text\">obj</code>(참조변수)에 참조되었다.</li>\n<li><code class=\"language-text\">obj</code>의 멤버 변수인 <code class=\"language-text\">y</code>를 호출하려고 하지만, <code class=\"language-text\">A</code>형에는 <code class=\"language-text\">y</code>가 없어 <u>호출 할 수 없다.</u></li>\n</ol>\n<p><strong>가시성</strong> 문제로 <code class=\"language-text\">B</code>의 인스턴스이라도 <code class=\"language-text\">A</code>형인 <code class=\"language-text\">obj</code>에서는 <code class=\"language-text\">B</code>형의 멤버변수를 볼 수 없다.\n3. <code class=\"language-text\">A</code>형인 <code class=\"language-text\">obj</code>를 <code class=\"language-text\">B</code>형으로 <strong>강제적 형변환</strong>으로 통해 <code class=\"language-text\">y</code>를 호출하였다.</p>\n<p><strong>참고자료</strong></p>\n<hr>\n<p><img src=\"https://s3.us-west-2.amazonaws.com/secure.notion-static.com/c1222769-1220-4230-a89b-b470cbaafaac/Untitled.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&#x26;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&#x26;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20230422%2Fus-west-2%2Fs3%2Faws4_request&#x26;X-Amz-Date=20230422T130644Z&#x26;X-Amz-Expires=3600&#x26;X-Amz-Signature=6b8f86660d1ca91fcfb48ea428c9d5c818e5e53e04d0fe9970816c353b9b7ca2&#x26;X-Amz-SignedHeaders=host&#x26;x-id=GetObject\" alt=\"\"></p>\n</li>\n<li>\n<p><strong>코드 2</strong></p>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Terran</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">int</span> hp<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Scv</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Terran</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">int</span> mineral<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Tank</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Terran</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">boolean</span> sMode<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Marine</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Terran</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">boolean</span> sPack<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyFoo</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">prtStatusOfSMode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Terran</span> argObj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 각 클래스별 S mode값을 출력하라.</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>argObj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Scv</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>             <span class=\"token comment\">// argObj는 Scv의 인스턴스면</span>\n         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Scv</span><span class=\"token punctuation\">)</span>argObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mineral<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argObj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Tank</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    <span class=\"token comment\">// argObj는 Tank의 인스턴스면</span>\n         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Tank</span><span class=\"token punctuation\">)</span>argObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argObj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Marine</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// argObj는 Marine의 인스턴스면</span>\n         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Marine</span><span class=\"token punctuation\">)</span>argObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sPack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">Terran</span> o1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">Terran</span> o2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Marine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">Terran</span> o3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Tank</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token class-name\">MyFoo</span><span class=\"token punctuation\">.</span><span class=\"token function\">prtStatusOfSMode</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// mineral 변수 호출</span>\n      <span class=\"token class-name\">MyFoo</span><span class=\"token punctuation\">.</span><span class=\"token function\">prtStatusOfSMode</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// sPack 변수 호출</span>\n      <span class=\"token class-name\">MyFoo</span><span class=\"token punctuation\">.</span><span class=\"token function\">prtStatusOfSMode</span><span class=\"token punctuation\">(</span>o3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// sMode 변수 호출</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>Scv, Tank, Marine은 Terran을 상속하는 클래스이다.</li>\n<li>각 클래스당 특별한 멤버 변수를 가지고 있다.</li>\n</ul>\n<p><strong>메인 메소드</strong></p>\n<hr>\n<ol>\n<li><code class=\"language-text\">Scv</code>, <code class=\"language-text\">Marine</code>, <code class=\"language-text\">Tank</code> 각각의 인스턴스를 만들고 <code class=\"language-text\">Terran</code>형의 참조변수에 참조되었다.</li>\n<li><code class=\"language-text\">prtStatusOfSMode()</code>(정적 메소드)를 통하여 각 객체는 어떤 클래스의 인스턴스인지 확인한다.\n<ol>\n<li><code class=\"language-text\">argObj</code>가 <code class=\"language-text\">Scv</code>의 인스턴스면, <code class=\"language-text\">Scv</code>형으로 강제 형변환하고 <code class=\"language-text\">mineral</code>을 호출하였다.</li>\n<li><code class=\"language-text\">argObj</code>가 <code class=\"language-text\">Tank</code>의 인스턴스면, <code class=\"language-text\">Tank</code>형으로 강제 형변환하고 <code class=\"language-text\">sMode</code>을 호출하였다.</li>\n<li><code class=\"language-text\">argObj</code>가 <code class=\"language-text\">Marine</code>의 인스턴스면, <code class=\"language-text\">Marine</code>형으로 강제 형변환하고 <code class=\"language-text\">sPack</code>을 호출하였다.</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"overriding\" style=\"position:relative;\"><a href=\"#overriding\" aria-label=\"overriding permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overriding</h3>\n<p>오버라이딩 (<strong>덮어쓰다</strong>, <strong>재정의</strong>)- 상속</p>\n<p>오버라이딩은 <u>상속받은 클래스</u>에서 <u>부모의 클래스</u>의 <u>메서드를</u> <u><strong>재정의</strong></u>하는 것.</p>\n<p>오버라이딩을하면 <u>하위 클래스</u>에서 <u>부모 클래스</u>의 메서드를 그대로 사용하는 대신, <strong>재정의</strong>한 메서드를 사용하게 된다.</p>\n<p>오버라이딩을 할 때는 <em>메서드 이름</em>, <em>매개변수</em>, _리턴 타입_이 부모 클래스와 일치해야한다.</p>\n<p>접근제어자는 부모와 같거나 좁은 범위로 설정해야 한다.</p>\n<ol>\n<li>\n<p><strong>코드 1</strong></p>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">prtX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">sout</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prtX of A is invoked\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n\t <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">prtX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// prtX of A is invoked</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>해당 코드 오버라이딩의 예 ⬇️</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">prtX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">sout</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prtX of A is invoked\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">prtX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">sout</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prtX of B is invoked\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">prtX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// prtX of B is invoked</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">super</code> 키워드를 사용하여 부모를 객체를 호출</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">prtX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">sout</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prtX of A is invoked\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">prtX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">prtX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 부모의 prtX() 메소드를 호출 </span>\n\t\t<span class=\"token function\">sout</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prtX of B is invoked\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">prtX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// prtX of A is invoked</span>\n\t<span class=\"token punctuation\">}</span>                  <span class=\"token comment\">// prtX of B is invoked</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<h3 id=\"동적-바인딩\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%A0%81-%EB%B0%94%EC%9D%B8%EB%94%A9\" aria-label=\"동적 바인딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동적 바인딩</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Terran</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Scv</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Terran</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> mineral<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Marine</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Terran</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">boolean</span> sPack<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Starcraft</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Terran</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> unitList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Terran</span><span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\tunitList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tunitList<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Marine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        unitList[0].mineral &lt;-- 접근 불가능!</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n<p>동적 바인딩(오버라이딩 된 메서드 #)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Terran</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">prtSMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  <span class=\"token comment\">// 동적바인딩을 하기 위해 선언해놓은 메소드</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Scv</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Terran</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> mineral <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">prtSMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// #</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>mineral<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Marine</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Terran</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">boolean</span> sPack <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">prtSMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// #</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sPack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Starcraft</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Terran</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> unitList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Terran</span><span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\tunitList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tunitList<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Marine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\n\t\t\t\tunitList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">prtSMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t\t\t\tunitList<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">prtSMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n<p>내일은 추상화…</p>\n<p>동적바인딩 dynamic binding for an  overriding method</p>\n<p>⇒ 다형성을 위해</p>\n<p>overriding</p>\n<ul>\n<li>상속</li>\n<li>메소드</li>\n</ul>\n<p>오버라이딩된 메소드의 동적 바인딩은 다형성의 단점을 보완을 해준다.</p>","excerpt":"다형성(Polymorphism) 다형성은 하나의 인터페이스로부터 상속받은 여러 클래스들이 같은 메서드를 가지고 있을 때 각 클래스마다 다르게 구현된 메서드를 호출하는 기능. 즉, 같은 인터페이스를 가지면서도 각 클래스마다 다른 구현을 할 수 있도록 하는 기능이다. 자바에서는 _오버라이딩(overriding)_과 _오버로딩(overloading)_을 통해 다형성을 구현합니다. WHAT WHY FEATURE Visibility of a reference variable (참조변수의 가시성) Dynamic binding for an overrided method (오버라이딩된 메소드의 동적 바인딩) 자바프로그래밍에서의 다형성 코드 1 B는 A를 상속하는 클래스이다. 메인메소드 의 인스턴스를 만들고 형의 (참조변수)에 참조되었다. 의 멤버 변수인 를 호출하려고 하지만, 형에는 가 없어 호출 할 수 없다. 가시성 문제로 의 인스턴스이라도 형인 에서는 형의 멤버변수를 볼 수 없다.\n3. 형인…","frontmatter":{"date":"April 22, 2023","title":"Polymorphism","categories":"Java Learning","author":"Juhyeon Lee","emoji":null},"fields":{"slug":"/96d8f60d-9283-4530-9057-d36e59552bb2/"}},"next":{"id":"294329bb-508f-5f3f-a95e-93779429b585","html":"<p>“<em>돈”</em></p>\n<p>⬇️</p>\n<p>코드의 <strong>재활용</strong> 발전할수록 <strong>개발비용</strong>, <strong>개발시간</strong>이 줄어든다. (인건비)</p>\n<ol>\n<li>비 구조적언어\n<ul>\n<li>Machine Language</li>\n</ul>\n</li>\n<li>구조적언어\n<ul>\n<li>Flow Control</li>\n<li>Function</li>\n</ul>\n</li>\n<li><a href=\"obsidian://open?vault=develog&#x26;file=Java%2FOOP\">객체지향언어</a> (Object Oriented Programming Language)</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>비 구조적 언어</th>\n<th>-></th>\n<th>구조적언어</th>\n<th>-></th>\n<th>객체지향적언어</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Machine Language</td>\n<td>+ High-level</td>\n<td>주석</td>\n<td>+ objective</td>\n<td><a href=\"/5398e6b0b17f41aea50f2bdc1dc96cc6\">Class &#x26; Object</a></td>\n</tr>\n<tr>\n<td></td>\n<td>+ compiler</td>\n<td>변수 ➡️ 배열 (자료구조)</td>\n<td></td>\n<td><strong>Inheritance</strong></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>연산자</td>\n<td></td>\n<td>Modifier</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>흐름제어문</td>\n<td></td>\n<td>Polymorphism</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>함수</td>\n<td></td>\n<td>Abstraction</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>Interface</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>Exception Handling</td>\n</tr>\n</tbody>\n</table>","frontmatter":{"date":"April 22, 2023","title":"언어의 발전","categories":"Java Learning","author":"Juhyeon Lee","emoji":null},"fields":{"slug":"/895ab7fc-c726-44ac-bc2b-6d80b82b18b6/"}},"prev":{"id":"481f9897-dedc-53f6-a56f-19734bae8924","html":"<h1 id=\"상속inheritance\" style=\"position:relative;\"><a href=\"#%EC%83%81%EC%86%8Dinheritance\" aria-label=\"상속inheritance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상속(Inheritance)</h1>\n<p>상속은 기존에 정의된 클래스의 _속성(properties)_과 _기능(methods)_을 새로운 클래스에 <u>재사용</u>하는 것.</p>\n<p>상속을 통해 코드의 <strong>재사용성</strong>을 높이고, <strong>유지보수</strong>를 용이하게 하도록 함.</p>\n<p><code class=\"language-text\">extends</code>라는 키워드를 사용하여 상속을 구현한다.</p>\n<p><strong>WHAT</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 상속은 기존에 정의된 클래스의 속성(properties)과 기능(methods)을 새로운 클래스에 재사용하는 것.</code></pre></div>\n<p><strong>WHY</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 상속을 통해 코드의 **재사용성**을 높이고, **유지보수**를 용이하게 하도록 함.\n- 기존에 정의된 클래스 기반으로 새로운 클래스를 만들어 코드를 재사용함으로 개발시간을 줄인다.</code></pre></div>\n<p><strong>FEATURE</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- ‘is-a’ 관계이다. &lt;u>예시) 거미는 동물이다. 리트리버는 개과이다. 등…&lt;/u>\n- 하나의 클래스만 상속받을 수 있다.\n\t- 인터페이스를 사용하면 다중 상속을 구현할 수 있다. (단순히 말하면)</code></pre></div>\n<h2 id=\"자바프로그래밍에서의-상속\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%97%90%EC%84%9C%EC%9D%98-%EC%83%81%EC%86%8D\" aria-label=\"자바프로그래밍에서의 상속 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바프로그래밍에서의 상속</h2>\n<ol>\n<li>\n<p><strong>코드 1</strong></p>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n\tint a_x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t\n\tint <span class=\"token function\">getAx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> a_x<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C1</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C2</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">String arg<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token constant\">B</span> b1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">.</span><span class=\"token function\">getAx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>B는 A를 상속하는 클래스이다.</li>\n<li>C1, C2는 B를 상속하는 클래스이다.</li>\n</ul>\n<p><strong>메인메소드</strong></p>\n<hr>\n<ol>\n<li><code class=\"language-text\">B</code>의 인스턴스를 만들고 <code class=\"language-text\">b1</code> (참조변수)에 할당했다.</li>\n<li><code class=\"language-text\">b1</code>의 멤버메소드인 <code class=\"language-text\">getAx()</code> 호출했다.\n<ol>\n<li><code class=\"language-text\">B</code> 클래스는 <code class=\"language-text\">A</code>를 상속하므로 <code class=\"language-text\">A</code>의 _멤버 변수_와 _멤버 메소드_를 호출할 수 있다.</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>코드 2</strong></p>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Player</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Center</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Player</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Forward</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Player</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SF</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Forward</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PF</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Forward</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Guard</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Player</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PG</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Guard</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SG</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Guard</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>모든 포지션은 Player이다.</li>\n<li>SF, PF는 Forward이다.</li>\n<li>PG, SG는 Guard이다.</li>\n</ul>\n</li>\n<li>\n<p><strong>코드 3</strong></p>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Inheritance</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t      <span class=\"token class-name\">Player</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Player</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PF</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tp1<span class=\"token punctuation\">.</span><span class=\"token function\">shoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tp2<span class=\"token punctuation\">.</span><span class=\"token function\">shoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Player</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">shoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Player 슛\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SG</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Player</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">SG</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> argName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> argNum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        name <span class=\"token operator\">=</span> argName<span class=\"token punctuation\">;</span>\n        num <span class=\"token operator\">=</span> argNum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">shoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SG슛\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PF</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Player</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">PF</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> argName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> argNum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        name <span class=\"token operator\">=</span> argName<span class=\"token punctuation\">;</span>\n        num <span class=\"token operator\">=</span> argNum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>SG, PF는 Player이다.</li>\n</ul>\n<p><strong>메인메소드</strong></p>\n<hr>\n<ol>\n<li><code class=\"language-text\">SG</code>의 새로운 인스턴스가 <code class=\"language-text\">p1</code>에 참조되었다.</li>\n<li><code class=\"language-text\">PF</code>의 새로운 인스턴스가 <code class=\"language-text\">p2</code>에 참조되었다.</li>\n<li><code class=\"language-text\">p1.shoot()</code> 호출\n<ol>\n<li><code class=\"language-text\">SG</code>의 <code class=\"language-text\">shoot()</code> _멤버 메소드_를 호출하였다.</li>\n</ol>\n</li>\n<li><code class=\"language-text\">p2.shoot()</code> 호출\n<ol>\n<li><code class=\"language-text\">Player</code>의 <code class=\"language-text\">shoot()</code> _멤버 메소드_를 호출하였다.</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>코드 주현4</strong></p>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\t\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">prtK</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">prtX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">prtK</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> arg<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">C</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tobj<span class=\"token punctuation\">.</span><span class=\"token function\">prtX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>main 메소드에서 실행되는 <code class=\"language-text\">obj.prtX()</code> 의 실행결과는</p>\n<p><code class=\"language-text\">3</code></p>\n</li>\n</ol>\n<p><a href=\"https://s3.us-west-2.amazonaws.com/secure.notion-static.com/843a3e28-0b41-4069-8179-99966a9abb82/Polymorphism.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&#x26;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&#x26;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20230422%2Fus-west-2%2Fs3%2Faws4_request&#x26;X-Amz-Date=20230422T130642Z&#x26;X-Amz-Expires=3600&#x26;X-Amz-Signature=b0f1c9f79b0ad2d0f9f0fa97180f2c3df7a0be413c96725f8c0db55a2a65d714&#x26;X-Amz-SignedHeaders=host&#x26;x-id=GetObject\">image</a></p>","frontmatter":{"date":"April 22, 2023","title":"Inheritance","categories":"Java Learning","author":"Juhyeon Lee","emoji":null},"fields":{"slug":"/a5093694-570b-443a-89ba-4341fc3cb1e3/"}},"site":{"siteMetadata":{"siteUrl":"https://d556f8.netlify.io","comments":{"utterances":{"repo":"d556f8/d556f8-devlog"}}}}},"pageContext":{"slug":"/96d8f60d-9283-4530-9057-d36e59552bb2/","nextSlug":"/895ab7fc-c726-44ac-bc2b-6d80b82b18b6/","prevSlug":"/a5093694-570b-443a-89ba-4341fc3cb1e3/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"],"slicesMap":{}}