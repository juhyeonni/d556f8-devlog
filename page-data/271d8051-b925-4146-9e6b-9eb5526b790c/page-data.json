{"componentChunkName":"component---src-templates-blog-template-js","path":"/271d8051-b925-4146-9e6b-9eb5526b790c/","result":{"data":{"cur":{"id":"d7910a84-c0c9-5dbf-9587-6aed03d0cfc9","html":"<p>자바에서 접근 제어자(<strong>Access Modifier</strong>)란 클래스, 메서드, 변수 등의 멤버에 대한 외부에서의 <u><strong>접근 가능 여부를 결정하는 키워드</strong></u>다.</p>\n<p>자바에서는 <strong>4개의 제어자</strong>가 있다.</p>\n<ol>\n<li>\n<p><code class=\"language-text\">public</code></p>\n<ul>\n<li>해당 멤버는 어디서든 접근 가능합니다.</li>\n<li>다른 패키지에서도 접근이 가능합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">protected</code></p>\n<ul>\n<li>해당 멤버는 동일한 패키지 내에서는 어디서든 접근 가능합니다.</li>\n<li>다른 패키지에서는 해당 멤버를 상속받은 자식 클래스에서만 접근이 가능합니다.</li>\n<li>모든 클래스가 상속 관계를 갖지 않는다는 점에서, protected 제어자를 전혀 사용하지 않아도 무방합니다. 다만 상속을 고려한 클래스 디자인을 할 때, 이를 이해하고 사용하면 코드의 가독성과 유지보수성이 향상될 수 있습니다. 따라서 protected 접근 제어자는 상황에 따라서 적절하게 사용되어야 합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">default</code> (아무 제어자도 붙이지 않은 경우)</p>\n<ul>\n<li>해당 멤버는 동일한 패키지 내에서만 접근 가능합니다.</li>\n<li>다른 패키지에서는 접근이 불가능합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">private</code></p>\n<ul>\n<li>해당 멤버는 선언된 클래스 내에서만 접근 가능합니다.</li>\n<li>다른 클래스에서는 접근이 불가능합니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>실습코드</strong></p>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> int age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> String dept<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">getDept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> dept<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setDept</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">String dept</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dept <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">String name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> int <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">int age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Person obj1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        obj1<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        obj1<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"juhyeon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        obj1<span class=\"token punctuation\">.</span><span class=\"token function\">setDept</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdj\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        System.out.println(obj1.age);   // not accessible</span>\n<span class=\"token comment\">//        System.out.println(obj1.name);   // not accessible</span>\n<span class=\"token comment\">//        System.out.println(obj1.dept);   // not accessible</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">.</span><span class=\"token function\">getDept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"접근-제어자를-설정하는-이유\" style=\"position:relative;\"><a href=\"#%EC%A0%91%EA%B7%BC-%EC%A0%9C%EC%96%B4%EC%9E%90%EB%A5%BC-%EC%84%A4%EC%A0%95%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"접근 제어자를 설정하는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>접근 제어자를 설정하는 이유</h2>\n<ol>\n<li>\n<p>정보 은닉</p>\n<p>객체 내부의 데이터를 보호할 수 있다.</p>\n</li>\n<li>\n<p>코드 유연성</p>\n<p>객체 간의 상호작용을 제한할 수 있다.</p>\n<p>객체 간의 의존성을 낮추고 유연성을 높일 수 있다.</p>\n</li>\n<li>\n<p>코드 유지보수성</p>\n<p>객체 간의 상호작용을 명확하게 구분할 수 있다.</p>\n<p>객체의 역할과 책임을 더 잘 파악할 수 있다.</p>\n</li>\n<li>\n<p>코드의 재사용성</p>\n<p>재사용 가능한 코드를 작성할 수 있다.</p>\n<p>객체 간의 상호작용이 잘 정의되면, 다른 프로그램에서도 같은 객체를 재사용할 수 있다.</p>\n</li>\n</ol>\n<h3 id=\"private\" style=\"position:relative;\"><a href=\"#private\" aria-label=\"private permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>private</h3>\n<ol>\n<li>잘못된 값을 설정하는 것을 막아줄 필요가 있다.</li>\n<li>읽기전용 멤버 변수로 만들 수 있다.</li>\n<li>클래스 소스코드를 업그레이드할 경우, 그 클래스를 사용하는 다른 코드에 미치는 영향을 최소화할 수 있다.</li>\n</ol>\n<p><strong><code class=\"language-text\">protected</code></strong> <strong>시험에 나올 수도?</strong></p>\n</li>\n</ol>","excerpt":"자바에서 접근 제어자(Access Modifier)란 클래스, 메서드, 변수 등의 멤버에 대한 외부에서의 접근 가능 여부를 결정하는 키워드다. 자바에서는 4개의 제어자가 있다.  해당 멤버는 어디서든 접근 가능합니다. 다른 패키지에서도 접근이 가능합니다.  해당 멤버는 동일한 패키지 내에서는 어디서든 접근 가능합니다. 다른 패키지에서는 해당 멤버를 상속받은 자식 클래스에서만 접근이 가능합니다. 모든 클래스가 상속 관계를 갖지 않는다는 점에서, protected 제어자를 전혀 사용하지 않아도 무방합니다. 다만 상속을 고려한 클래스 디자인을 할 때, 이를 이해하고 사용하면 코드의 가독성과 유지보수성이 향상될 수 있습니다. 따라서 protected 접근 제어자는 상황에 따라서 적절하게 사용되어야 합니다.  (아무 제어자도 붙이지 않은 경우) 해당 멤버는 동일한 패키지 내에서만 접근 가능합니다. 다른 패키지에서는 접근이 불가능합니다.  해당 멤버는 선언된 클래스 내에서만 접근 가능합니다.…","frontmatter":{"date":"March 16, 2023","title":"Access Modifier","categories":"Java Learning","author":"Juhyeon Lee","emoji":null},"fields":{"slug":"/271d8051-b925-4146-9e6b-9eb5526b790c/"}},"next":{"id":"1d1c8c32-86ce-5b1b-8f19-c2a01db22b36","html":"<h1 id=\"컴퓨터의-발달과정\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%93%A8%ED%84%B0%EC%9D%98-%EB%B0%9C%EB%8B%AC%EA%B3%BC%EC%A0%95\" aria-label=\"컴퓨터의 발달과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴퓨터의 발달과정</h1>\n<p>세계 최초의 컴퓨터\n처음에는 계산과 처리 중심이었다.</p>\n<ol>\n<li><strong>MARK 1</strong>\n<ul>\n<li>미 해군의 미사일 탄도를 계산하기 위해서 개발되었다.</li>\n</ul>\n</li>\n<li><strong>ENIAC</strong>\n<ul>\n<li>최초의 전자식 계산기</li>\n<li>이전의 기계적인 방식에서 전자기기로의 변화를 이끌었다.</li>\n</ul>\n</li>\n</ol>\n<p>컴퓨터가 보급되기 시작하면서,\n문서와 서류를 처리하는 직업인 사서와 같은 직업이 등작했다.</p>\n<p>이에 정보의 중요성이 대두되기 시작했다.\n문서파일로 만들어지는 프로그램들이 개발되었다.\n예를 들어 hwp, excel등이 있고, 문서의 작성과 편집을 용이하게 하였다.</p>\n<p>하지만 파일 시스템에서는 데이터의 중복이나 실시간 보장이 어렵다.\n이에 데이터베이스라는 개념이 등장하였다.\n데이터베이스는 파일 시스템과 다르게 중복을 피하고, 일관성 있는 데이터를 관리할 수 있게 해준다.</p>\n<p>이를 위해 DBMS가 개발되었고, 이후 RDBMS 등 다양한 형태의 데이터베이스가 개발되어 사용되었다.</p>","frontmatter":{"date":"March 15, 2023","title":"관계형 데이터베이스와 SQL","categories":"SQL Learning","author":"Juhyeon Lee","emoji":null},"fields":{"slug":"/a8c47479-6884-4f33-aa39-8ca1ce57fcaf/"}},"prev":{"id":"cacb593f-2c48-59e7-8078-fb2e12a0dbc1","html":"<h1 id=\"sql에서의-데이터-제거하는-방법\" style=\"position:relative;\"><a href=\"#sql%EC%97%90%EC%84%9C%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%9C%EA%B1%B0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"sql에서의 데이터 제거하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SQL에서의 데이터 제거하는 방법</h1>\n<h2 id=\"물리적-삭제\" style=\"position:relative;\"><a href=\"#%EB%AC%BC%EB%A6%AC%EC%A0%81-%EC%82%AD%EC%A0%9C\" aria-label=\"물리적 삭제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>물리적 삭제</h2>\n<p>실제로 데이터를 삭제하는 방법이다.</p>\n<p>해당 레코드와 관련된 모든 참조도 삭제된다.</p>\n<p>따라서 데이터를 복구할 수 없고, 데이터를 완전히 삭제해야 할 때 사용된다.</p>\n<h2 id=\"논리적-삭제\" style=\"position:relative;\"><a href=\"#%EB%85%BC%EB%A6%AC%EC%A0%81-%EC%82%AD%EC%A0%9C\" aria-label=\"논리적 삭제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>논리적 삭제</h2>\n<p>실제로 데이터를 삭제하지 않는 방법이다.</p>\n<p>플래그나 마크를 추가하여 해당 레코드가 더 이상 사용되지 않거나 유효하지 않는 것을 나타낸다.</p>\n<p>다른 레코드에서 해당 레코드를 참조하고 있을 때 유용하다.</p>\n<p>논리적 삭제를 사용할 때는 별도의 열이나 속성을 추가해야한다.</p>","frontmatter":{"date":"March 16, 2023","title":"삭제","categories":"SQL Learning","author":"Juhyeon Lee","emoji":null},"fields":{"slug":"/8fbb96b3-9995-4682-b99c-4b6234ae9749/"}},"site":{"siteMetadata":{"siteUrl":"https://d556f8.netlify.io","comments":{"utterances":{"repo":"d556f8/d556f8-devlog"}}}}},"pageContext":{"slug":"/271d8051-b925-4146-9e6b-9eb5526b790c/","nextSlug":"/a8c47479-6884-4f33-aa39-8ca1ce57fcaf/","prevSlug":"/8fbb96b3-9995-4682-b99c-4b6234ae9749/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"],"slicesMap":{}}